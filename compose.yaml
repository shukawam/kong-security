x-default: &default
  networks:
    - kong-network
  restart: on-failure
x-kong-env: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_HOST: database
  KONG_PG_PASSWORD: kong
  KONG_PASSWORD: kong

networks:
  kong-network:

services:
  # --- Kong Gateway ---
  database:
    <<: *default
    image: postgres:16
    container_name: database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 30s
      retries: 3
  migrations:
    <<: *default
    image: &kong-gateway-image kong/kong-gateway:3.11
    container_name: migrations
    depends_on:
      - database
    command: kong migrations bootstrap
    environment:
      <<: *kong-env
  gateway:
    <<: *default
    image: *kong-gateway-image
    container_name: gateway
    depends_on:
      - migrations
    ports:
      - 8000:8000
      - 8001:8001
      - 8002:8002
      - 8100:8100
    environment:
      <<: *kong-env
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_HOST: http://localhost:8002
      # Kong Gateway License Key, if you have
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA:-}
      # Enable tracing
      KONG_TRACING_INSTRUMENTATIONS: all
      KONG_TRACING_SAMPLING_RATE: 1.0
      # Enable Status API for Data Plane
      KONG_STATUS_LISTEN: 0.0.0.0:8100
      # Logging settings
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      # Kong Manager Authentication Settings
      KONG_ENFORCE_RBAC: on
      # Enable Basic Auth for Kong Manager
      KONG_ADMIN_GUI_AUTH: basic-auth
      KONG_PASSWORD: kong
      KONG_ADMIN_GUI_SESSION_CONF: |
        { "secret": "kong" }
      # Enable OpenID Connect for Kong Manager
      # see: https://developer.konghq.com/plugins/openid-connect/reference/
      # KONG_ADMIN_GUI_AUTH: openid-connect
      # KONG_ADMIN_GUI_AUTH_CONF: |
      #   { 
      #     "issuer": "${ISSUER}",
      #     "client_id": ["${CLIENT_ID}"],
      #     "client_secret": ["${CLIENT_SECRET}"],
      #     "authenticated_groups_claim": ["${AUTHENTICATED_GROUPS_CLAIM}"],
      #     "redirect_uri": ["http://localhost:8001/auth"],
      #     "login_redirect_uri": ["http://localhost:8002"],
      #     "logout_redirect_uri": ["http://localhost:8002"],
      #     "scopes": ["openid", "profile", "email"],
      #     "admin_auto_create_rbac_token_disabled": false
      #   }
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8100/status/ready || exit 1"]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 20s
  deck:
    <<: *default
    image: kong/deck:v1.49.0
    working_dir: /files
    container_name: deck
    command:
      ["gateway", "sync", "--kong-addr", "http://gateway:8001", "kong.yaml"]
    environment:
      DECK_ISSUER: ${ISSUER:-}
      DECK_CLIENT_ID: ${DECK_CLIENT_ID:-}
      DECK_CLIENT_SECRET: ${DECK_CLIENT_SECRET:-}
      DECK_AUTHENTICATED_GROUPS_CLAIM: ${DECK_AUTHENTICATED_GROUPS_CLAIM:-}
    volumes:
      - ./config/kong/kong.yaml:/files/kong.yaml
    depends_on:
      - gateway

  # --- Redis ---
  redis:
    <<: *default
    image: redis:8.0.2
    container_name: redis
    ports:
      - 6379:6379
